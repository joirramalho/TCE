USE [master]
GO
/****** Object:  StoredProcedure [dbo].[BdAudit]    Script Date: 21/05/2020 11:08:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- 16Junho V1.01

-- EXEC Master.dbo.sp_MigrateTableAudit @db = 'bdcTrigger'

ALTER PROCEDURE [dbo].[sp_MigrateTableAudit]
	@db	VARCHAR(128)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE	@Id				INT
	DECLARE @Tb				VARCHAR(128)
	DECLARE @TbRename		VARCHAR(128)

	DECLARE @EventType		VARCHAR(32)
	DECLARE @CamposAudit	VARCHAR(MAX) = ''

	DECLARE @TSQL			nVARCHAR(MAX)
	DECLARE @Trigger		nVARCHAR(MAX)

	DECLARE	@Applyed		BIT

	DECLARE @BatchSize		INT = 0
	DECLARE @Qtd			INT


	SELECT  @Qtd = count(*) 
	FROM BdDDL.dbo.DDLEvents 
	WHERE	DatabaseName = @db -- NOT LIKE '%_Audit'  
			AND EventType IN ('CREATE_TABLE', 'ALTER_TABLE', 'RENAME', 'DROP_TABLE' ) 
			AND ApplyDatabaseAudit = 0 

	--SELECT  count(*) 
	--FROM BdDDL.dbo.DDLEvents 
	--WHERE	DatabaseName = 'bdcTrigger' -- NOT LIKE '%_Audit'  
	--		AND EventType IN ('CREATE_TABLE', 'ALTER_TABLE', 'RENAME', 'DROP_TABLE' ) 
	--		AND ApplyDatabaseAudit = 0 


	WHILE @Qtd > 0
	BEGIN
		SET @qtd = @Qtd - 1

		SET @Applyed = 0

		SELECT TOP 1 @Id = IdDDLEvents, @EventType = EventType, @Tb = ObjectName, @TSQL = EventDDL -- @db = DatabaseName, 
		FROM BdDDL.dbo.DDLEvents 
		WHERE	DatabaseName = @db -- NOT LIKE '%_Audit' 
				AND EventType IN ('CREATE_TABLE', 'ALTER_TABLE', 'RENAME', 'DROP_TABLE' ) 
				AND ApplyDatabaseAudit = 0 
		ORDER BY IdDDLEvents

	/*
		SELECT TOP 1 IdDDLEvents, EventType, DatabaseName, ObjectName, EventDDL 
		FROM BdDDL.dbo.DDLEvents 
		WHERE	DatabaseName = 'bdctRIGGER' 
				AND EventType IN ('CREATE_TABLE', 'ALTER_TABLE', 'RENAME', 'DROP_TABLE' ) 
				AND ApplyDatabaseAudit = 0 
		ORDER BY IdDDLEvents
	*/

		PRINT @TSQL

		IF LEFT ( @tb, 4 ) = 'Tmp_' 
			SET @Tb = RTRIM( SUBSTRING( @Tb, 5, 128 ) )


		SET @TSQL = REPLACE ( @TSQL , 'IDENTITY (1, 1)' , '' )
		SET @TSQL = REPLACE ( @TSQL , 'NOT' , '' )


		IF @EventType IS NOT NULL
			BEGIN
				DECLARE @exec nvarchar(max) = QUOTENAME( @db + '_audit' ) + N'.sys.sp_executesql'

				IF @EventType IN ( 'ALTER_TABLE', 'DROP_TABLE' )
					BEGIN
						BEGIN TRY
							SET		@exec = QUOTENAME( @db + '_audit' ) + N'.sys.sp_executesql'

							IF CHARINDEX('ADD CONSTRAINT', @TSQL ) = 0 AND CHARINDEX('DROP CONSTRAINT', @TSQL ) = 0
								BEGIN
									EXEC	@exec @TSQL
								END

							SET @Applyed = 1
						END TRY
						BEGIN CATCH
							PRINT	ERROR_MESSAGE()
						END CATCH
					END



				ELSE IF @EventType IN ( 'RENAME' )
					BEGIN
						BEGIN TRY

							IF  CHARINDEX('COLUMN', @TSQL ) > 0 -- RENAME COLUMN -- DROP TRIGGER TABELA BASE
								BEGIN
									IF OBJECT_ID('tempdb..#tmpTrigger') IS NOT NULL
										DROP TABLE #tmpTrigger

									CREATE TABLE #tmpTrigger	( TriggerName VARCHAR(100) )

									SET @TbRename	= SUBSTRING( @TSQL, CHARINDEX('.', @TSQL ) + 1, LEN( @TSQL ) - CHARINDEX('.', @TSQL ) - CHARINDEX('.', REVERSE( @TSQL ) ) )

									SET	@exec		= QUOTENAME( @db ) + N'.sys.sp_executesql'
								
									SET	@Trigger	= 'SELECT o.name FROM sys.triggers AS t INNER JOIN sys.objects AS o  ON t.parent_id = o.object_id WHERE o.name = @TbRename';    


									INSERT INTO #tmpTrigger
										EXEC	@exec @Trigger, N'@TbRename varchar(128)', @TbRename;

									IF	EXISTS ( SELECT * FROM #tmpTrigger )
										BEGIN
											SET		@Trigger = 'DROP TRIGGER dbo.tg_' + @TbRename + '_audit';
								
											EXEC	@exec @Trigger
										END
								END

							SET		@exec = QUOTENAME( @db + '_audit' ) + N'.sys.sp_executesql'
							EXEC	@exec @TSQL

							SET @Applyed = 1
						END TRY
						BEGIN CATCH
							PRINT	ERROR_MESSAGE()
						END CATCH
					END
				


				ELSE IF @EventType IN ( 'CREATE_TABLE' ) AND CHARINDEX('Tmp_', @TSQL ) > 0
					BEGIN

						-- 1o bloco
						BEGIN TRY
							-- Nova tabela Tmp

							EXEC	@exec @TSQL
							----	SELECT * INTO BdTesteTrigger_Audit.dbo.Tmp_t1 FROM BdTesteTrigger.dbo.t1 WHERE 1 = 2
							--		SET		@TSQL = 'SELECT * INTO ' + @db + '_Audit' + '.dbo.Tmp_' + @Tb + ' FROM ' + @db + '.dbo.' + @Tb + ' WHERE 1 = 2';		      
							--		EXEC	@exec @TSQL


							-- 2o bloco
							BEGIN TRY
								 PRINT	'ADD Campos _Audit no final'
								SET		@TSQL = 'ALTER TABLE ' + @db + '_Audit' + '.dbo.Tmp_' + @Tb + ' ADD Operacao char(1) NOT NULL, UsuarioConexao varchar(20) NOT NULL, DataConexao datetime NOT NULL';		      

								EXEC	@exec @TSQL


									-- 3o bloco
									BEGIN TRY
										IF OBJECT_ID('tempdb..#tmpCampos') IS NOT NULL
											DROP TABLE #tmpCampos

										CREATE TABLE #tmpCampos	( Campos VARCHAR(128) )


										--- Campos Audit
										SET		@TSQL = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @Tb'; 

										SET		@exec = QUOTENAME( @db + '_Audit' ) + N'.sys.sp_executesql'

										INSERT INTO #tmpCampos
											EXEC	@exec @TSQL, N'@tb VARCHAR(128)', @Tb;

										SELECT	@CamposAudit	= @CamposAudit + Campos + ', ' FROM #tmpCampos
										SET		@CamposAudit	= SUBSTRING( @CamposAudit, 0, LEN( @CamposAudit ));


										-- PRINT	'INSERT registros tabela atual de _Audit na Tmp_*'
										SET		@TSQL = 'INSERT INTO ' + @db + '_Audit' + '.dbo.Tmp_' + @Tb + ' ( ' + @CamposAudit + ' ) SELECT ' + @CamposAudit + ' FROM ' + @db + '_Audit' + '.dbo.' + @Tb + ' WITH (HOLDLOCK TABLOCKX)';
	
										EXEC	@exec @TSQL



										--- DROP TRIGGER
										IF OBJECT_ID('tempdb..#tmpDropTrigger') IS NOT NULL
											DROP TABLE #tmpDropTrigger

										CREATE TABLE #tmpDropTrigger	
											( TriggerName VARCHAR(128) )


										SET	@exec		= QUOTENAME( @db ) + N'.sys.sp_executesql'
								
										SET	@Trigger	= 'SELECT o.name FROM sys.triggers AS t INNER JOIN sys.objects AS o  ON t.parent_id = o.object_id WHERE o.name = @Tb';    

										INSERT INTO #tmpDropTrigger
											EXEC	@exec @Trigger, N'@Tb varchar(128)', @Tb;

										IF	EXISTS ( SELECT * FROM #tmpDropTrigger )
											BEGIN
												SET		@Trigger = 'DROP TRIGGER dbo.tg_' + @Tb + '_audit';
								
												EXEC	@exec @Trigger
											END


										---
										SET @Applyed = 1
									END TRY
									BEGIN CATCH
										PRINT	ERROR_MESSAGE()
									END CATCH

								END TRY
								BEGIN CATCH
									PRINT	ERROR_MESSAGE()
								END CATCH

						END TRY
						BEGIN CATCH
							PRINT	ERROR_MESSAGE()
						END CATCH
				END

			IF @Applyed = 1
				BEGIN
					SET		@TSQL = N'UPDATE BdDDL.dbo.DDLEvents SET ApplyDatabaseAudit = 1 WHERE IdDDLEvents = @Id;';

					EXEC	@exec @TSQL, N'@Id int', @Id;
				END
		END
	END

END

